// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "message.proto" (package "sgns.ipfs_lite.ipfs.graphsync.pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sgns.ipfs_lite.ipfs.graphsync.pb.Message
 */
export interface Message {
    /**
     * the actual data included in this message
     *
     * @generated from protobuf field: bool completeRequestList = 1;
     */
    completeRequestList: boolean; // This request list includes *all* requests, replacing outstanding requests.
    /**
     * @generated from protobuf field: repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Request requests = 2;
     */
    requests: Message_Request[]; // The list of requests.
    /**
     * @generated from protobuf field: repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Response responses = 3;
     */
    responses: Message_Response[]; // The list of responses.
    /**
     * @generated from protobuf field: repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Block data = 4;
     */
    data: Message_Block[]; // Blocks related to the responses
}
/**
 * @generated from protobuf message sgns.ipfs_lite.ipfs.graphsync.pb.Message.Request
 */
export interface Message_Request {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // unique id set on the requester side
    /**
     * @generated from protobuf field: bytes root = 2;
     */
    root: Uint8Array; // a CID for the root node in the query
    /**
     * @generated from protobuf field: bytes selector = 3;
     */
    selector: Uint8Array; // ipld selector to retrieve
    /**
     * @generated from protobuf field: map<string, bytes> extensions = 4;
     */
    extensions: {
        [key: string]: Uint8Array;
    }; // aux information. useful for other protocols
    /**
     * @generated from protobuf field: int32 priority = 5;
     */
    priority: number; // the priority (normalized). default to 1
    /**
     * @generated from protobuf field: bool cancel = 6;
     */
    cancel: boolean; // whether this cancels a request
}
/**
 * @generated from protobuf message sgns.ipfs_lite.ipfs.graphsync.pb.Message.Response
 */
export interface Message_Response {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // the request id
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number; // a status code.
    /**
     * @generated from protobuf field: map<string, bytes> extensions = 3;
     */
    extensions: {
        [key: string]: Uint8Array;
    }; // additional data
}
/**
 * @generated from protobuf message sgns.ipfs_lite.ipfs.graphsync.pb.Message.Block
 */
export interface Message_Block {
    /**
     * @generated from protobuf field: bytes prefix = 1;
     */
    prefix: Uint8Array; // CID prefix (cid version, multicodec and multihash prefix (type + length)
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("sgns.ipfs_lite.ipfs.graphsync.pb.Message", [
            { no: 1, name: "completeRequestList", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message_Request },
            { no: 3, name: "responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message_Response },
            { no: 4, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message_Block }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.completeRequestList = false;
        message.requests = [];
        message.responses = [];
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool completeRequestList */ 1:
                    message.completeRequestList = reader.bool();
                    break;
                case /* repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Request requests */ 2:
                    message.requests.push(Message_Request.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Response responses */ 3:
                    message.responses.push(Message_Response.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Block data */ 4:
                    message.data.push(Message_Block.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool completeRequestList = 1; */
        if (message.completeRequestList !== false)
            writer.tag(1, WireType.Varint).bool(message.completeRequestList);
        /* repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Request requests = 2; */
        for (let i = 0; i < message.requests.length; i++)
            Message_Request.internalBinaryWrite(message.requests[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Response responses = 3; */
        for (let i = 0; i < message.responses.length; i++)
            Message_Response.internalBinaryWrite(message.responses[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated sgns.ipfs_lite.ipfs.graphsync.pb.Message.Block data = 4; */
        for (let i = 0; i < message.data.length; i++)
            Message_Block.internalBinaryWrite(message.data[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.ipfs_lite.ipfs.graphsync.pb.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message_Request$Type extends MessageType<Message_Request> {
    constructor() {
        super("sgns.ipfs_lite.ipfs.graphsync.pb.Message.Request", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "root", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "selector", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "extensions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ } },
            { no: 5, name: "priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "cancel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Message_Request>): Message_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.root = new Uint8Array(0);
        message.selector = new Uint8Array(0);
        message.extensions = {};
        message.priority = 0;
        message.cancel = false;
        if (value !== undefined)
            reflectionMergePartial<Message_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message_Request): Message_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* bytes root */ 2:
                    message.root = reader.bytes();
                    break;
                case /* bytes selector */ 3:
                    message.selector = reader.bytes();
                    break;
                case /* map<string, bytes> extensions */ 4:
                    this.binaryReadMap4(message.extensions, reader, options);
                    break;
                case /* int32 priority */ 5:
                    message.priority = reader.int32();
                    break;
                case /* bool cancel */ 6:
                    message.cancel = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: Message_Request["extensions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Message_Request["extensions"] | undefined, val: Message_Request["extensions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sgns.ipfs_lite.ipfs.graphsync.pb.Message.Request.extensions");
            }
        }
        map[key ?? ""] = val ?? new Uint8Array(0);
    }
    internalBinaryWrite(message: Message_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* bytes root = 2; */
        if (message.root.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.root);
        /* bytes selector = 3; */
        if (message.selector.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.selector);
        /* map<string, bytes> extensions = 4; */
        for (let k of globalThis.Object.keys(message.extensions))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.extensions[k]).join();
        /* int32 priority = 5; */
        if (message.priority !== 0)
            writer.tag(5, WireType.Varint).int32(message.priority);
        /* bool cancel = 6; */
        if (message.cancel !== false)
            writer.tag(6, WireType.Varint).bool(message.cancel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.ipfs_lite.ipfs.graphsync.pb.Message.Request
 */
export const Message_Request = new Message_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message_Response$Type extends MessageType<Message_Response> {
    constructor() {
        super("sgns.ipfs_lite.ipfs.graphsync.pb.Message.Response", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "extensions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ } }
        ]);
    }
    create(value?: PartialMessage<Message_Response>): Message_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.status = 0;
        message.extensions = {};
        if (value !== undefined)
            reflectionMergePartial<Message_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message_Response): Message_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* map<string, bytes> extensions */ 3:
                    this.binaryReadMap3(message.extensions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: Message_Response["extensions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Message_Response["extensions"] | undefined, val: Message_Response["extensions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sgns.ipfs_lite.ipfs.graphsync.pb.Message.Response.extensions");
            }
        }
        map[key ?? ""] = val ?? new Uint8Array(0);
    }
    internalBinaryWrite(message: Message_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* map<string, bytes> extensions = 3; */
        for (let k of globalThis.Object.keys(message.extensions))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.extensions[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.ipfs_lite.ipfs.graphsync.pb.Message.Response
 */
export const Message_Response = new Message_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message_Block$Type extends MessageType<Message_Block> {
    constructor() {
        super("sgns.ipfs_lite.ipfs.graphsync.pb.Message.Block", [
            { no: 1, name: "prefix", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Message_Block>): Message_Block {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.prefix = new Uint8Array(0);
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Message_Block>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message_Block): Message_Block {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes prefix */ 1:
                    message.prefix = reader.bytes();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message_Block, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes prefix = 1; */
        if (message.prefix.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.prefix);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.ipfs_lite.ipfs.graphsync.pb.Message.Block
 */
export const Message_Block = new Message_Block$Type();
