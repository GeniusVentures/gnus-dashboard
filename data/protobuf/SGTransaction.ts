// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "SGTransaction.proto" (package "SGTransaction", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SGTransaction.DAGStruct
 */
export interface DAGStruct {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string; // 
    /**
     * @generated from protobuf field: bytes previous_hash = 2;
     */
    previousHash: Uint8Array; // 
    /**
     * @generated from protobuf field: bytes source_addr = 3;
     */
    sourceAddr: Uint8Array; // 
    /**
     * @generated from protobuf field: uint64 nonce = 4;
     */
    nonce: bigint; // 
    /**
     * @generated from protobuf field: int64 timestamp = 5;
     */
    timestamp: bigint; // 
    /**
     * @generated from protobuf field: bytes uncle_hash = 6;
     */
    uncleHash: Uint8Array; // 
    /**
     * @generated from protobuf field: bytes data_hash = 7;
     */
    dataHash: Uint8Array; // 
}
/**
 * @generated from protobuf message SGTransaction.DAGWrapper
 */
export interface DAGWrapper {
    /**
     * @generated from protobuf field: SGTransaction.DAGStruct dag_struct = 1;
     */
    dagStruct?: DAGStruct; // 
}
/**
 * @generated from protobuf message SGTransaction.TransferUTXOInput
 */
export interface TransferUTXOInput {
    /**
     * @generated from protobuf field: bytes tx_id_hash = 1;
     */
    txIdHash: Uint8Array; // 
    /**
     * @generated from protobuf field: uint32 output_index = 2;
     */
    outputIndex: number;
    /**
     * @generated from protobuf field: bytes signature = 3;
     */
    signature: Uint8Array;
}
/**
 * @generated from protobuf message SGTransaction.TransferOutput
 */
export interface TransferOutput {
    /**
     * @generated from protobuf field: bytes encrypted_amount = 1;
     */
    encryptedAmount: Uint8Array; // 
    /**
     * @generated from protobuf field: bytes dest_addr = 2;
     */
    destAddr: Uint8Array; // 
}
/**
 * @generated from protobuf message SGTransaction.UTXOTxParams
 */
export interface UTXOTxParams {
    /**
     * @generated from protobuf field: repeated SGTransaction.TransferUTXOInput inputs = 1;
     */
    inputs: TransferUTXOInput[]; // 
    /**
     * @generated from protobuf field: repeated SGTransaction.TransferOutput outputs = 2;
     */
    outputs: TransferOutput[]; // 
}
/**
 * @generated from protobuf message SGTransaction.TransferTx
 */
export interface TransferTx {
    /**
     * @generated from protobuf field: SGTransaction.DAGStruct dag_struct = 1;
     */
    dagStruct?: DAGStruct; // 
    /**
     * @generated from protobuf field: uint64 token_id = 2;
     */
    tokenId: bigint; // 
    /**
     * @generated from protobuf field: SGTransaction.UTXOTxParams utxo_params = 3;
     */
    utxoParams?: UTXOTxParams;
}
/**
 * @generated from protobuf message SGTransaction.ProcessingTx
 */
export interface ProcessingTx {
    /**
     * @generated from protobuf field: SGTransaction.DAGStruct dag_struct = 1;
     */
    dagStruct?: DAGStruct; // 
    /**
     * @generated from protobuf field: uint64 mpc_magic_key = 2;
     */
    mpcMagicKey: bigint;
    /**
     * @generated from protobuf field: uint64 offset = 3;
     */
    offset: bigint;
    /**
     * @generated from protobuf field: string job_cid = 4;
     */
    jobCid: string; // 
    /**
     * @generated from protobuf field: repeated string subtask_cids = 5;
     */
    subtaskCids: string[]; // 
    /**
     * @generated from protobuf field: repeated string node_addresses = 6;
     */
    nodeAddresses: string[];
}
/**
 * @generated from protobuf message SGTransaction.MintTx
 */
export interface MintTx {
    /**
     * @generated from protobuf field: SGTransaction.DAGStruct dag_struct = 1;
     */
    dagStruct?: DAGStruct; // 
    /**
     * @generated from protobuf field: bytes chain_id = 2;
     */
    chainId: Uint8Array;
    /**
     * @generated from protobuf field: uint64 amount = 3;
     */
    amount: bigint; // 
}
/**
 * @generated from protobuf message SGTransaction.EscrowTx
 */
export interface EscrowTx {
    /**
     * @generated from protobuf field: SGTransaction.DAGStruct dag_struct = 1;
     */
    dagStruct?: DAGStruct; // 
    /**
     * @generated from protobuf field: SGTransaction.UTXOTxParams utxo_params = 2;
     */
    utxoParams?: UTXOTxParams;
    /**
     * @generated from protobuf field: uint64 amount = 3;
     */
    amount: bigint;
    /**
     * @generated from protobuf field: bytes dev_addr = 4;
     */
    devAddr: Uint8Array; // 
    /**
     * @generated from protobuf field: float peers_cut = 5;
     */
    peersCut: number; // 
}
// @generated message type with reflection information, may provide speed optimized methods
class DAGStruct$Type extends MessageType<DAGStruct> {
    constructor() {
        super("SGTransaction.DAGStruct", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "previous_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "source_addr", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "nonce", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "uncle_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "data_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<DAGStruct>): DAGStruct {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.previousHash = new Uint8Array(0);
        message.sourceAddr = new Uint8Array(0);
        message.nonce = 0n;
        message.timestamp = 0n;
        message.uncleHash = new Uint8Array(0);
        message.dataHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DAGStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DAGStruct): DAGStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* bytes previous_hash */ 2:
                    message.previousHash = reader.bytes();
                    break;
                case /* bytes source_addr */ 3:
                    message.sourceAddr = reader.bytes();
                    break;
                case /* uint64 nonce */ 4:
                    message.nonce = reader.uint64().toBigInt();
                    break;
                case /* int64 timestamp */ 5:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* bytes uncle_hash */ 6:
                    message.uncleHash = reader.bytes();
                    break;
                case /* bytes data_hash */ 7:
                    message.dataHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DAGStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* bytes previous_hash = 2; */
        if (message.previousHash.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.previousHash);
        /* bytes source_addr = 3; */
        if (message.sourceAddr.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.sourceAddr);
        /* uint64 nonce = 4; */
        if (message.nonce !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.nonce);
        /* int64 timestamp = 5; */
        if (message.timestamp !== 0n)
            writer.tag(5, WireType.Varint).int64(message.timestamp);
        /* bytes uncle_hash = 6; */
        if (message.uncleHash.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.uncleHash);
        /* bytes data_hash = 7; */
        if (message.dataHash.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.dataHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.DAGStruct
 */
export const DAGStruct = new DAGStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DAGWrapper$Type extends MessageType<DAGWrapper> {
    constructor() {
        super("SGTransaction.DAGWrapper", [
            { no: 1, name: "dag_struct", kind: "message", T: () => DAGStruct }
        ]);
    }
    create(value?: PartialMessage<DAGWrapper>): DAGWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DAGWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DAGWrapper): DAGWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SGTransaction.DAGStruct dag_struct */ 1:
                    message.dagStruct = DAGStruct.internalBinaryRead(reader, reader.uint32(), options, message.dagStruct);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DAGWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SGTransaction.DAGStruct dag_struct = 1; */
        if (message.dagStruct)
            DAGStruct.internalBinaryWrite(message.dagStruct, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.DAGWrapper
 */
export const DAGWrapper = new DAGWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferUTXOInput$Type extends MessageType<TransferUTXOInput> {
    constructor() {
        super("SGTransaction.TransferUTXOInput", [
            { no: 1, name: "tx_id_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "output_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TransferUTXOInput>): TransferUTXOInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.txIdHash = new Uint8Array(0);
        message.outputIndex = 0;
        message.signature = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TransferUTXOInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferUTXOInput): TransferUTXOInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id_hash */ 1:
                    message.txIdHash = reader.bytes();
                    break;
                case /* uint32 output_index */ 2:
                    message.outputIndex = reader.uint32();
                    break;
                case /* bytes signature */ 3:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferUTXOInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes tx_id_hash = 1; */
        if (message.txIdHash.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txIdHash);
        /* uint32 output_index = 2; */
        if (message.outputIndex !== 0)
            writer.tag(2, WireType.Varint).uint32(message.outputIndex);
        /* bytes signature = 3; */
        if (message.signature.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.TransferUTXOInput
 */
export const TransferUTXOInput = new TransferUTXOInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferOutput$Type extends MessageType<TransferOutput> {
    constructor() {
        super("SGTransaction.TransferOutput", [
            { no: 1, name: "encrypted_amount", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "dest_addr", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TransferOutput>): TransferOutput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.encryptedAmount = new Uint8Array(0);
        message.destAddr = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TransferOutput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferOutput): TransferOutput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes encrypted_amount */ 1:
                    message.encryptedAmount = reader.bytes();
                    break;
                case /* bytes dest_addr */ 2:
                    message.destAddr = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes encrypted_amount = 1; */
        if (message.encryptedAmount.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.encryptedAmount);
        /* bytes dest_addr = 2; */
        if (message.destAddr.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.destAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.TransferOutput
 */
export const TransferOutput = new TransferOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UTXOTxParams$Type extends MessageType<UTXOTxParams> {
    constructor() {
        super("SGTransaction.UTXOTxParams", [
            { no: 1, name: "inputs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TransferUTXOInput },
            { no: 2, name: "outputs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TransferOutput }
        ]);
    }
    create(value?: PartialMessage<UTXOTxParams>): UTXOTxParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inputs = [];
        message.outputs = [];
        if (value !== undefined)
            reflectionMergePartial<UTXOTxParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UTXOTxParams): UTXOTxParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated SGTransaction.TransferUTXOInput inputs */ 1:
                    message.inputs.push(TransferUTXOInput.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated SGTransaction.TransferOutput outputs */ 2:
                    message.outputs.push(TransferOutput.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UTXOTxParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated SGTransaction.TransferUTXOInput inputs = 1; */
        for (let i = 0; i < message.inputs.length; i++)
            TransferUTXOInput.internalBinaryWrite(message.inputs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated SGTransaction.TransferOutput outputs = 2; */
        for (let i = 0; i < message.outputs.length; i++)
            TransferOutput.internalBinaryWrite(message.outputs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.UTXOTxParams
 */
export const UTXOTxParams = new UTXOTxParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferTx$Type extends MessageType<TransferTx> {
    constructor() {
        super("SGTransaction.TransferTx", [
            { no: 1, name: "dag_struct", kind: "message", T: () => DAGStruct },
            { no: 2, name: "token_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "utxo_params", kind: "message", T: () => UTXOTxParams }
        ]);
    }
    create(value?: PartialMessage<TransferTx>): TransferTx {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tokenId = 0n;
        if (value !== undefined)
            reflectionMergePartial<TransferTx>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferTx): TransferTx {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SGTransaction.DAGStruct dag_struct */ 1:
                    message.dagStruct = DAGStruct.internalBinaryRead(reader, reader.uint32(), options, message.dagStruct);
                    break;
                case /* uint64 token_id */ 2:
                    message.tokenId = reader.uint64().toBigInt();
                    break;
                case /* SGTransaction.UTXOTxParams utxo_params */ 3:
                    message.utxoParams = UTXOTxParams.internalBinaryRead(reader, reader.uint32(), options, message.utxoParams);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SGTransaction.DAGStruct dag_struct = 1; */
        if (message.dagStruct)
            DAGStruct.internalBinaryWrite(message.dagStruct, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 token_id = 2; */
        if (message.tokenId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.tokenId);
        /* SGTransaction.UTXOTxParams utxo_params = 3; */
        if (message.utxoParams)
            UTXOTxParams.internalBinaryWrite(message.utxoParams, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.TransferTx
 */
export const TransferTx = new TransferTx$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessingTx$Type extends MessageType<ProcessingTx> {
    constructor() {
        super("SGTransaction.ProcessingTx", [
            { no: 1, name: "dag_struct", kind: "message", T: () => DAGStruct },
            { no: 2, name: "mpc_magic_key", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "offset", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "job_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "subtask_cids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "node_addresses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProcessingTx>): ProcessingTx {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mpcMagicKey = 0n;
        message.offset = 0n;
        message.jobCid = "";
        message.subtaskCids = [];
        message.nodeAddresses = [];
        if (value !== undefined)
            reflectionMergePartial<ProcessingTx>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessingTx): ProcessingTx {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SGTransaction.DAGStruct dag_struct */ 1:
                    message.dagStruct = DAGStruct.internalBinaryRead(reader, reader.uint32(), options, message.dagStruct);
                    break;
                case /* uint64 mpc_magic_key */ 2:
                    message.mpcMagicKey = reader.uint64().toBigInt();
                    break;
                case /* uint64 offset */ 3:
                    message.offset = reader.uint64().toBigInt();
                    break;
                case /* string job_cid */ 4:
                    message.jobCid = reader.string();
                    break;
                case /* repeated string subtask_cids */ 5:
                    message.subtaskCids.push(reader.string());
                    break;
                case /* repeated string node_addresses */ 6:
                    message.nodeAddresses.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProcessingTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SGTransaction.DAGStruct dag_struct = 1; */
        if (message.dagStruct)
            DAGStruct.internalBinaryWrite(message.dagStruct, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 mpc_magic_key = 2; */
        if (message.mpcMagicKey !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.mpcMagicKey);
        /* uint64 offset = 3; */
        if (message.offset !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.offset);
        /* string job_cid = 4; */
        if (message.jobCid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.jobCid);
        /* repeated string subtask_cids = 5; */
        for (let i = 0; i < message.subtaskCids.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.subtaskCids[i]);
        /* repeated string node_addresses = 6; */
        for (let i = 0; i < message.nodeAddresses.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.nodeAddresses[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.ProcessingTx
 */
export const ProcessingTx = new ProcessingTx$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MintTx$Type extends MessageType<MintTx> {
    constructor() {
        super("SGTransaction.MintTx", [
            { no: 1, name: "dag_struct", kind: "message", T: () => DAGStruct },
            { no: 2, name: "chain_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "amount", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MintTx>): MintTx {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chainId = new Uint8Array(0);
        message.amount = 0n;
        if (value !== undefined)
            reflectionMergePartial<MintTx>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MintTx): MintTx {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SGTransaction.DAGStruct dag_struct */ 1:
                    message.dagStruct = DAGStruct.internalBinaryRead(reader, reader.uint32(), options, message.dagStruct);
                    break;
                case /* bytes chain_id */ 2:
                    message.chainId = reader.bytes();
                    break;
                case /* uint64 amount */ 3:
                    message.amount = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MintTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SGTransaction.DAGStruct dag_struct = 1; */
        if (message.dagStruct)
            DAGStruct.internalBinaryWrite(message.dagStruct, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes chain_id = 2; */
        if (message.chainId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.chainId);
        /* uint64 amount = 3; */
        if (message.amount !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.MintTx
 */
export const MintTx = new MintTx$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EscrowTx$Type extends MessageType<EscrowTx> {
    constructor() {
        super("SGTransaction.EscrowTx", [
            { no: 1, name: "dag_struct", kind: "message", T: () => DAGStruct },
            { no: 2, name: "utxo_params", kind: "message", T: () => UTXOTxParams },
            { no: 3, name: "amount", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "dev_addr", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "peers_cut", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<EscrowTx>): EscrowTx {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = 0n;
        message.devAddr = new Uint8Array(0);
        message.peersCut = 0;
        if (value !== undefined)
            reflectionMergePartial<EscrowTx>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EscrowTx): EscrowTx {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SGTransaction.DAGStruct dag_struct */ 1:
                    message.dagStruct = DAGStruct.internalBinaryRead(reader, reader.uint32(), options, message.dagStruct);
                    break;
                case /* SGTransaction.UTXOTxParams utxo_params */ 2:
                    message.utxoParams = UTXOTxParams.internalBinaryRead(reader, reader.uint32(), options, message.utxoParams);
                    break;
                case /* uint64 amount */ 3:
                    message.amount = reader.uint64().toBigInt();
                    break;
                case /* bytes dev_addr */ 4:
                    message.devAddr = reader.bytes();
                    break;
                case /* float peers_cut */ 5:
                    message.peersCut = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EscrowTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SGTransaction.DAGStruct dag_struct = 1; */
        if (message.dagStruct)
            DAGStruct.internalBinaryWrite(message.dagStruct, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* SGTransaction.UTXOTxParams utxo_params = 2; */
        if (message.utxoParams)
            UTXOTxParams.internalBinaryWrite(message.utxoParams, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 amount = 3; */
        if (message.amount !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.amount);
        /* bytes dev_addr = 4; */
        if (message.devAddr.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.devAddr);
        /* float peers_cut = 5; */
        if (message.peersCut !== 0)
            writer.tag(5, WireType.Bit32).float(message.peersCut);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SGTransaction.EscrowTx
 */
export const EscrowTx = new EscrowTx$Type();
