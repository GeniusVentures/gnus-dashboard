// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "bcast.proto" (package "sgns.crdt.pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sgns.crdt.pb.CRDTBroadcast
 */
export interface CRDTBroadcast {
    /**
     * @generated from protobuf field: repeated sgns.crdt.pb.Head heads = 1
     */
    heads: Head[]; // A list of heads
}
/**
 * @generated from protobuf message sgns.crdt.pb.Head
 */
export interface Head {
    /**
     * @generated from protobuf field: bytes cid = 1
     */
    cid: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class CRDTBroadcast$Type extends MessageType<CRDTBroadcast> {
    constructor() {
        super("sgns.crdt.pb.CRDTBroadcast", [
            { no: 1, name: "heads", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Head }
        ]);
    }
    create(value?: PartialMessage<CRDTBroadcast>): CRDTBroadcast {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.heads = [];
        if (value !== undefined)
            reflectionMergePartial<CRDTBroadcast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CRDTBroadcast): CRDTBroadcast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sgns.crdt.pb.Head heads */ 1:
                    message.heads.push(Head.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CRDTBroadcast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sgns.crdt.pb.Head heads = 1; */
        for (let i = 0; i < message.heads.length; i++)
            Head.internalBinaryWrite(message.heads[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.crdt.pb.CRDTBroadcast
 */
export const CRDTBroadcast = new CRDTBroadcast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Head$Type extends MessageType<Head> {
    constructor() {
        super("sgns.crdt.pb.Head", [
            { no: 1, name: "cid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Head>): Head {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Head>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Head): Head {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes cid */ 1:
                    message.cid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Head, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes cid = 1; */
        if (message.cid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.crdt.pb.Head
 */
export const Head = new Head$Type();
