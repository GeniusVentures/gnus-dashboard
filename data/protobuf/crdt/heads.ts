// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "heads.proto" (package "sgns.crdt.pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * info stored for each head in the kv-store
 *
 * @generated from protobuf message sgns.crdt.pb.HeadInfo
 */
export interface HeadInfo {
    /**
     * @generated from protobuf field: uint64 height = 1
     */
    height: bigint;
    /**
     * @generated from protobuf field: string topic = 2
     */
    topic: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class HeadInfo$Type extends MessageType<HeadInfo> {
    constructor() {
        super("sgns.crdt.pb.HeadInfo", [
            { no: 1, name: "height", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HeadInfo>): HeadInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.height = 0n;
        message.topic = "";
        if (value !== undefined)
            reflectionMergePartial<HeadInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeadInfo): HeadInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 height */ 1:
                    message.height = reader.uint64().toBigInt();
                    break;
                case /* string topic */ 2:
                    message.topic = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HeadInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 height = 1; */
        if (message.height !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.height);
        /* string topic = 2; */
        if (message.topic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.topic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.crdt.pb.HeadInfo
 */
export const HeadInfo = new HeadInfo$Type();
