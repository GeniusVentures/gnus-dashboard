// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "delta.proto" (package "sgns.crdt.pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sgns.crdt.pb.Delta
 */
export interface Delta {
    /**
     * @generated from protobuf field: repeated sgns.crdt.pb.Element elements = 1
     */
    elements: Element[];
    /**
     * @generated from protobuf field: repeated sgns.crdt.pb.Element tombstones = 2
     */
    tombstones: Element[];
    /**
     * @generated from protobuf field: uint64 priority = 3
     */
    priority: bigint;
}
/**
 * @generated from protobuf message sgns.crdt.pb.Element
 */
export interface Element {
    /**
     * key+id must form a unique identifier
     *
     * @generated from protobuf field: string key = 1
     */
    key: string;
    /**
     * @generated from protobuf field: string id = 2
     */
    id: string;
    /**
     * @generated from protobuf field: bytes value = 3
     */
    value: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class Delta$Type extends MessageType<Delta> {
    constructor() {
        super("sgns.crdt.pb.Delta", [
            { no: 1, name: "elements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Element },
            { no: 2, name: "tombstones", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Element },
            { no: 3, name: "priority", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Delta>): Delta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.elements = [];
        message.tombstones = [];
        message.priority = 0n;
        if (value !== undefined)
            reflectionMergePartial<Delta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Delta): Delta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sgns.crdt.pb.Element elements */ 1:
                    message.elements.push(Element.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated sgns.crdt.pb.Element tombstones */ 2:
                    message.tombstones.push(Element.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 priority */ 3:
                    message.priority = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Delta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sgns.crdt.pb.Element elements = 1; */
        for (let i = 0; i < message.elements.length; i++)
            Element.internalBinaryWrite(message.elements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated sgns.crdt.pb.Element tombstones = 2; */
        for (let i = 0; i < message.tombstones.length; i++)
            Element.internalBinaryWrite(message.tombstones[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 priority = 3; */
        if (message.priority !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.crdt.pb.Delta
 */
export const Delta = new Delta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Element$Type extends MessageType<Element> {
    constructor() {
        super("sgns.crdt.pb.Element", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Element>): Element {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.id = "";
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Element>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Element): Element {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* bytes value */ 3:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Element, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* bytes value = 3; */
        if (message.value.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sgns.crdt.pb.Element
 */
export const Element = new Element$Type();
